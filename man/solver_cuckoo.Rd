% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/solver_cuckoo.R
\name{solver_cuckoo}
\alias{solver_cuckoo}
\title{Cuckoo Search Solver (Toda Version)}
\usage{
solver_cuckoo(G, nfe, args)
}
\arguments{
\item{G}{the graph to be solved, represented by a list where G$V is the
number of nodes, and G$E is a |E|x2 matrix of edges.}

\item{nfe}{the number of function evaluations. The solver will stop after this
number has been exceeded.}

\item{args}{a list with arguments for the method. The list must contain the
following names:

\itemize{
\item \emph{pop}: Integer > 0. The size of the solution set X
\item \emph{pc}: Float in [0,1]. The probability of mutation in step 2.
\item \emph{compare}: Boolean. Wheter the individuals in step 2 are compared
before being accepted.
\item \emph{policy}: One of "levy", "uniform", "fixed". Whether the m
value in step 2 is chosen from a levy distribution, uniform distribution
or a fixed value.
\item \emph{E}: Value of 'm' for \emph{policy = "fixed"}
\item \emph{beta}: Parameter for the levy distribution
\item \emph{alpha}: Parameter for the levy distribution
}}
}
\value{
A list with three names:
\itemize{
\item{violation}: the number of graph coloring violations of the best solution found (0 for a correct solution)
\item{best}: a vector with the best solution found
\item{evals}: the number of evaluations used by the time the solver stopped.
}
}
\description{
Solves a instance of the 3-GCP problem using the Cuckoo Search (CS)
implementation described in Toda et al., 2016.
}
\details{
The CS algorithm begins with a random set of solutions X, and at every
iteration performs the following two steps:

\itemize{
\item 1- For every solution x_i in X, apply the mutate.cuckoo(x_i, Levy)
function to generate a new solution x_u. Replace x_i with x_u if the
second is better.
\item 2- For every solution x_i in X, apply the mutate.cuckoo(x_i, Policy)
function with a probability \emph{pc} to generate a new solution x_u.
Replace x_i with x_u always (if \emph{compare} is false) or if the
second is better (otherwise).
}

Mutate.cuckoo(x_i, policy) generates a new individual as follows:
an integer `m` is chosen based on the policy parameter (levy distribution,
uniform distribution, or fixed). Then `m`` elements from x_i are
changed to a random, different value.
}
\references{
Toda Keita, Claus Aranha, Hitoshi Kanoh, "Solving the Graph Coloring Problem using Cuckoo Search",
Technical Report of the Information Processing Society of Japan, 2016
}

